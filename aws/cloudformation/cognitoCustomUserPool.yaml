---
  AWSTemplateFormatVersion: "2010-09-09"
  Description: "Template to create Cognito User Pool for Authentication."
  Parameters:
    ResourceBucketName:
      Type: "String"
      Description: Name of bucket that contains the resources. lamda's templates...
  Resources:
    CloudFormationCustomUserPoolLogGroup:
      Type: "AWS::Logs::LogGroup"
      Properties:
        LogGroupName: "/aws/lambda/custom-user-pool-dev-cloudFormationCustomUserPool"
    PostConfirmationLogGroup:
      Type: "AWS::Logs::LogGroup"
      Properties:
        LogGroupName: "/aws/lambda/custom-user-pool-dev-postConfirmation"
    IamRoleLambdaExecution:
      Type: "AWS::IAM::Role"
      Properties:
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            -
              Effect: "Allow"
              Principal:
                Service:
                  - "lambda.amazonaws.com"
              Action:
                - "sts:AssumeRole"
        Policies:
          -
            PolicyName:
              Fn::Join:
                - "-"
                -
                  - "dev"
                  - "custom-user-pool"
                  - "lambda"
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                -
                  Effect: "Allow"
                  Action:
                    - "logs:CreateLogStream"
                  Resource:
                    -
                      Fn::Sub: "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/custom-user-pool-dev-cloudFormationCustomUserPool:*"
                    -
                      Fn::Sub: "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/custom-user-pool-dev-postConfirmation:*"
                -
                  Effect: "Allow"
                  Action:
                    - "logs:PutLogEvents"
                  Resource:
                    -
                      Fn::Sub: "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/custom-user-pool-dev-cloudFormationCustomUserPool:*:*"
                    -
                      Fn::Sub: "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/custom-user-pool-dev-postConfirmation:*:*"
        Path: "/"
        RoleName:
          Fn::Join:
            - "-"
            -
              - "custom-user-pool"
              - "dev"
              - "us-east-2"
              - "lambdaRole"
    CloudFormationCustomUserPoolLambdaFunction:
      Type: "AWS::Lambda::Function"
      Properties:
        Code:
          S3Bucket:
            Ref: "ResourceBucketName"
          S3Key: "cognitoCustomUserPool.zip"
        FunctionName: "cloudFormationCustomUserPool"
        Handler: "cloudFormationCustomUserPool.handler"
        MemorySize: 1024
        Role:
          Fn::GetAtt:
            - "CustomUserPoolRole"
            - "Arn"
        Runtime: "nodejs6.10"
        Timeout: 300
      DependsOn:
        - "CloudFormationCustomUserPoolLogGroup"
        - "CustomUserPoolRole"
    CloudFormationCustomUserPoolLambdaVersion:
      Type: "AWS::Lambda::Version"
      DeletionPolicy: "Retain"
      Properties:
        FunctionName:
          Ref: "CloudFormationCustomUserPoolLambdaFunction"
    PostConfirmationLambdaFunction:
      Type: "AWS::Lambda::Function"
      Properties:
        Code:
          S3Bucket:
            Ref: "ResourceBucketName"
          S3Key: "cognitoCustomUserPool.zip"
        FunctionName: "custom-user-pool-dev-postConfirmation"
        Handler: "postConfirmation.handler"
        MemorySize: 1024
        Role:
          Fn::GetAtt:
            - "IamRoleLambdaExecution"
            - "Arn"
        Runtime: "nodejs6.10"
        Timeout: 6
      DependsOn:
        - "PostConfirmationLogGroup"
        - "IamRoleLambdaExecution"
    PostConfirmationLambdaVersion:
      Type: "AWS::Lambda::Version"
      DeletionPolicy: "Retain"
      Properties:
        FunctionName:
          Ref: "PostConfirmationLambdaFunction"
    CustomUserPoolRole:
      Type: "AWS::IAM::Role"
      Properties:
        RoleName: "custom-user-pool-dev-custom-user-pool-role"
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            -
              Effect: "Allow"
              Principal:
                Service:
                  - "lambda.amazonaws.com"
              Action: "sts:AssumeRole"
        Policies:
          -
            PolicyName: "custom-user-pool-dev-custom-user-pool-policy"
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                -
                  Effect: "Allow"
                  Action:
                    - "logs:CreateLogStream"
                    - "logs:PutLogEvents"
                  Resource:
                    -
                      Fn::Join:
                        - ":"
                        -
                          - "arn:aws:logs"
                          -
                            Ref: "AWS::Region"
                          -
                            Ref: "AWS::AccountId"
                          - "log-group:/aws/lambda/*:*:*"
                -
                  Effect: "Allow"
                  Action:
                    - "cognito-idp:CreateUserPool"
                    - "cognito-idp:DeleteUserPool"
                    - "cognito-idp:UpdateUserPool"
                    - "cognito-idp:DescribeUserPool"
                  Resource: "*"
    CognitoUserPoolUserPool:
      Type: "Custom::UserPool"
      Version: "1.0"
      DependsOn: "CloudFormationCustomUserPoolLambdaFunction"
      Properties:
        ServiceToken:
          Fn::GetAtt:
            - "CloudFormationCustomUserPoolLambdaFunction"
            - "Arn"
        Region:
          Ref: "AWS::Region"
        AccountId:
          Ref: "AWS::AccountId"
        PoolProperties:
          PoolName: "custom-user-pool-dev-UserPool"
          MfaConfiguration: "OFF"
          VerificationMessageTemplate:
            DefaultEmailOption: "CONFIRM_WITH_CODE"
          AdminCreateUserConfig:
            UnusedAccountValidityDays: 7
            AllowAdminCreateUserOnly: false
          AutoVerifiedAttributes:
            - "email"
          Policies:
            PasswordPolicy:
              RequireLowercase: true
              RequireSymbols: true
              RequireNumbers: true
              MinimumLength: 8
              RequireUppercase: true
          UsernameAttributes:
            - "email"
          Schema:
            -
              Name: "email"
              AttributeDataType: "String"
              Mutable: false
              Required: true
    CognitoUserPoolClientUserPoolClient:
      Type: "AWS::Cognito::UserPoolClient"
      Properties:
        ClientName: "custom-user-pool-dev-UserPoolClient"
        UserPoolId:
          Ref: "CognitoUserPoolUserPool"
        ExplicitAuthFlows:
          - "ADMIN_NO_SRP_AUTH"
        GenerateSecret: false
        RefreshTokenValidity: 30
        ReadAttributes:
          - "name"
          - "email"
  Outputs:
    LambdaBucketName:
      Value:
        Ref: "ResourceBucketName"
    CloudFormationCustomUserPoolLambdaFunctionQualifiedArn:
      Description: "Current Lambda function version"
      Value:
        Ref: "CloudFormationCustomUserPoolLambdaVersion"
    PostConfirmationLambdaFunctionQualifiedArn:
      Description: "Current Lambda function version"
      Value:
        Ref: "PostConfirmationLambdaVersion"
    UserPoolId:
      Value:
        Ref: "CognitoUserPoolUserPool"
      Export:
        Name: !Sub "${AWS::StackName}-UserPoolId"
    AppClientId:
      Value:
        Ref: "CognitoUserPoolClientUserPoolClient"
      Export:
        Name: !Sub "${AWS::StackName}-AppClientId"
